package net.findzen.mvcs.view{    import com.bigspaceship.display.AnimationState;    import com.bigspaceship.display.StandardInOut;    import com.bigspaceship.events.AnimationEvent;    import com.greensock.*;    import com.greensock.events.LoaderEvent;    import com.greensock.loading.*;    import com.greensock.loading.display.*;    import flash.display.*;    import flash.events.*;    import flash.text.*;    import flash.utils.*;    import flash.utils.Dictionary;    import net.findzen.mvcs.view.core.IComponent;    import net.findzen.mvcs.view.core.IView;    import net.findzen.mvcs.view.data.ViewState;    import net.findzen.utils.HashTable;    import net.findzen.utils.Log;    public class View extends Component implements IView    {        protected var _displayObjects:Object;        protected var _components:Object;        protected var _states:Object;        protected var _defaultState:String;        protected var _currentState:Array;        protected var _loaded:Boolean;        protected var _loader:LoaderMax;        protected var _useFrameLabels:Boolean = false;        protected var _inOut:StandardInOut;        public function View($container:MovieClip)        {            super($container);            _displayObjects = {};            _components = {};            /* _loader = new LoaderMax({ onComplete: _onLoadComplete, onError: _onLoadError });             _loaded = false;*/            this.container.mouseEnabled = false;            this.container.mouseChildren = false;            this.container.visible = false;        }        protected function _setInOut():void        {            _inOut = _useFrameLabels && this.container ? new StandardInOut(this.container) : null;        }        public function get useFrameLabels():Boolean        {            return _useFrameLabels;        }        public function set useFrameLabels(value:Boolean):void        {            // use StandardInOut frame labels?            _useFrameLabels = value;            _setInOut();        }        override public function show($forceAnim:Boolean = false):IComponent        {            //Log.status(this, this.name, 'show', _useFrameLabels);            this.container.mouseEnabled = true;            this.container.mouseChildren = true;            this.container.visible = true;            _showComponents($forceAnim);            /* if(!_loaded)             {                 Log.status(this, this.name, 'Loading');                 // start loading                 _loader.load();             }*/            _animateIn($forceAnim);            return this;        }        override public function hide($forceAnim:Boolean = false):IComponent        {            //Log.status(this, this.name, 'hide');            this.container.mouseEnabled = false;            this.container.mouseChildren = false;            /* if(_loader.status != LoaderStatus.LOADING)                 _loader.pause();*/            /*for each(var v:VideoAsset in _videos.contents)                v.pause();*/            _animateOut($forceAnim);            return this;        }        public function registerDisplayObject($o:DisplayObject):IView        {            _displayObjects[$o.name] = $o;            return this;        }        public function set components($components:Object):void        {            var component:IComponent;            for each(component in $components)                this.addComponent(component);        }        public function addComponent($c:IComponent):IComponent        {            var ClassReference:Class = $c is IView ? IView : getDefinitionByName(getQualifiedClassName($c)) as Class;            $c.parent = this;            Log.status(this, 'Registering component: ' + $c.name, ClassReference);            // create key by Class if it doesn't exist            // might need to rethink this. Would be better to use interface as key rather than concrete class            if(!_components.hasOwnProperty(ClassReference))                _components[ClassReference] = new HashTable();            // add to hash table            HashTable(_components[ClassReference]).addItem($c.name, $c);            // get component states and add to states object            if(_states && $c.includeIn)            {                var s:String;                // show component if it's includeIn array contains the currentState                if(_currentState && $c.includeIn.indexOf(_currentState[0]) >= 0)                    $c.show();            }            // if currentState is set and component is an IView...            if(_currentState && $c is IView)            {                // set component states if available                if(_currentState.length > 1)                    IView($c).state = _currentState.slice(1);            }            return $c;        }        public function getComponent($id:String, $type:Class = null):IComponent        {            // default to IView            $type = $type || IView;            return _components.hasOwnProperty($type) ? _components[$type].getItem($id) as IComponent : null;        }        public function set states($states:Object):void        {            var s:ViewState;            for each(s in $states)                this.addState(s);        }        public function addState($state:ViewState):IView        {            _states ||= {};            _states[$state.name] = $state;            return this;        }        public function get defaultState():String        {            return _defaultState;        }        public function set defaultState($name:String):void        {            _defaultState = $name;            // if no state has been set, use default            if(_defaultState && _states && !_currentState)                this.state = [ _defaultState ];        }        public function get state():Array        {            return _currentState;        }        public function set state($val:Array):void        {            Log.status(this, this.name, 'Setting state', $val[0]);            if(!$val.length || !_states || !_states.hasOwnProperty($val[0]))            {                Log.error(this, 'Invalid state', $val);                return;            }            var childState:Array = $val.slice(1); // pass state to components, removing first index            var stateVars:ViewState;            var c:IComponent;            var dict:Dictionary;            _currentState = $val;            stateVars = _states[$val[0]];            _showComponents();            // no child views, no need to proceed            if(!_components.hasOwnProperty(IView))                return;            // apply view states to view containers            if(childState.length)            {                dict = HashTable(_components[IView]).contents;                for each(c in dict)                    IView(c).state = childState;            }            //dispatch state change signal?        }        override public function destroy():void        {            // to do: destroy all components            _loader.dispose(true);            _loader = null;            _loaded = false;            super.destroy();        }        /////////////////////////////////////////////////////////////////////////////        //// Loader        ///////////////////////////////////////////////////////////////////////////        public function get loaded():Boolean        {            return _loaded;        }        public function get loader():LoaderMax        {            return _loader;        }        protected function _onLoadComplete($e:LoaderEvent):void        {            Log.status(this, this.name, 'load complete', $e.target);            _loaded = true;        }        protected function _onLoadError($e:LoaderEvent):void        {            Log.error(this, 'error occured with', $e.target, $e.text);        }        /////////////////////////////////////////////////////////////////////////////        //// Protected        ///////////////////////////////////////////////////////////////////////////        protected function _animateIn($forceAnim:Boolean = false):void        {            if(_useFrameLabels && _inOut)                _inOut.animateIn($forceAnim);            else if(this.container)                this.container.visible = true;        }        protected function _animateOut($forceAnim:Boolean = false):void        {            if(_useFrameLabels && _inOut)            {                _inOut.addEventListener(AnimationEvent.OUT, _onAnimateOut);                _inOut.animateOut($forceAnim);            }            else            {                this.container.visible = false;            }        }        protected function _onAnimateOut($e:AnimationEvent):void        {            _inOut.removeEventListener(AnimationEvent.OUT, _onAnimateOut);            this.container.visible = false;        }        protected function _showComponents($forceAnim:Boolean = false):void        {            var c:IComponent;            var hash:HashTable;            var dict:Dictionary;            for each(hash in _components)            {                dict = hash.contents;                for each(c in dict)                {                    // show if includeIn = null or includeIn has currentState, otherwise hide                    if(!c.includeIn || (_currentState && c.includeIn.indexOf(_currentState[0]) >= 0))                        c.show($forceAnim);                    else                        c.hide($forceAnim);                }            }        }    }}