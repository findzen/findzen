package net.findzen.mvc {	import net.findzen.mvc.*;	import net.findzen.events.CustomEvent;		import flash.events.EventDispatcher;	import flash.events.MouseEvent;	import flash.events.Event;	import flash.display.Sprite;		/**	 * Basic View class in Model/View/Controller triad.	 */	public class View extends Sprite implements IView {				private var _model:EventDispatcher;		private var _controller:Controller;				public function View(m:EventDispatcher, c:Controller) {			// Set the model.			setModel(m);			// If a controller was supplied, use it. Otherwise let the first			// call to getController() create the default controller.			if (c !==null) {				setController(c);			}		} 				/**		 * Returns the default controller for this view.		 */		public function defaultController(model:EventDispatcher):Controller {			return null;		}		/**		 * Sets the model this view is observing.		 */		public function setModel(m:EventDispatcher):void {			_model = m;		}		/**		 * Returns the model this view is observing.		 */		public function getModel():EventDispatcher {			return _model;		}		/**		 * Sets the controller for this view.		 */		public function setController(c:Controller):void {			_controller = c;			getController(null).setView(this);		}		/**		 * Returns this view's controller.		 */		public function getController(e:MouseEvent):Controller {			// If a controller hasn't been defined yet...make one. 			if (_controller === null) {				setController(defaultController(getModel()));			}			return _controller;		}		/**		 * An empty Observer update() method. 		 * Subclasses of AbstractView will provide		 * a concrete implementation for this method		 * and update the view applicably		 */		public function update(e:CustomEvent):void {					}	}}